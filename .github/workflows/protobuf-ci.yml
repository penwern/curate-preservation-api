name: Protobuf CI

on:
  pull_request:
    paths:
      - 'common/proto/**'
      - 'models/**'
      - '.github/workflows/protobuf-ci.yml'
      - '.github/workflows/update-protobuf.yml'
  push:
    branches: [main, develop]
    paths:
      - 'common/proto/**'
      - 'models/**'

jobs:
  protobuf-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install Buf CLI
        run: |
          BUF_VERSION="1.28.1"
          curl -sSL "https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/buf
          chmod +x /usr/local/bin/buf
          buf --version

      - name: Validate buf configuration
        run: |
          cd common/proto/a3m
          echo "üîç Validating buf configuration..."
          buf config ls-modules
          
          echo "üìã Checking buf.yaml syntax..."
          buf config ls --config buf.yaml

      - name: Check protobuf dependencies
        run: |
          cd common/proto/a3m
          echo "üì¶ Validating dependencies..."
          buf dep ls
          
          echo "üîí Checking lock file integrity..."
          if [ -f buf.lock ]; then
            echo "Lock file exists and contains:"
            cat buf.lock
          else
            echo "‚ö†Ô∏è No lock file found"
          fi

      - name: Generate and verify protobuf code
        run: |
          cd common/proto/a3m
          echo "üî® Generating protobuf code..."
          
          # Generate code
          buf generate
          
          # Check if generated code matches committed code
          cd ../../..
          if git diff --quiet; then
            echo "‚úÖ Generated code matches committed code"
          else
            echo "‚ùå Generated code differs from committed code"
            echo "Differences found:"
            git diff --name-only
            echo ""
            echo "This usually means the committed generated code is out of sync."
            echo "Please run 'buf generate' in common/proto/a3m/ and commit the changes."
            exit 1
          fi

      - name: Build generated Go code
        run: |
          echo "üî® Building generated Go protobuf code..."
          go mod tidy
          go build ./common/proto/...
          
          echo "üî® Building models that use protobuf..."
          go build ./models/...

      - name: Run protobuf-related tests
        run: |
          echo "üß™ Running tests for protobuf-related packages..."
          go test ./models/... -v
          go test ./common/proto/... -v -short

      - name: Lint generated code
        run: |
          echo "üîç Running linting on generated code..."
          go vet ./common/proto/...
          go vet ./models/...

      - name: Check for breaking changes
        if: github.event_name == 'pull_request'
        run: |
          echo "üîç Checking for potential breaking changes in protobuf..."
          
          # This is a basic check - in a real scenario you might want to use
          # buf breaking or other tools for proper API compatibility checking
          
          # Check if any exported types in models package changed
          if git diff --name-only origin/main...HEAD | grep -q "models/.*\.go$"; then
            echo "‚ö†Ô∏è  Changes detected in models package."
            echo "Please verify that changes are backward compatible."
            echo ""
            echo "Changed files in models:"
            git diff --name-only origin/main...HEAD | grep "models/.*\.go$" || true
          fi

  integration-test:
    runs-on: ubuntu-latest
    needs: protobuf-validation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run integration tests
        run: |
          echo "üß™ Running integration tests with protobuf models..."
          go test ./... -tags=integration -v

      - name: Test JSON serialization
        run: |
          echo "üß™ Testing JSON serialization of protobuf models..."
          go test ./models/ -run "JSON" -v

      - name: Benchmark protobuf operations
        run: |
          echo "‚ö° Running protobuf performance benchmarks..."
          go test ./models/ -bench=. -benchmem -run=^$ || true